#include "picorv32-extraops.S"

.section .text

/* reset handler */
.org 0x00000000
	j _start

/* irq handler */
.org 0x00000010
	j _irq


_irq:
	/* save x1/x2 to q1/q2 */
	picorv32_setq_insn(q2, x1)
	picorv32_setq_insn(q3, x2)
	
	/* use x1 to index into irq_regs */
	lui x1, %hi(irq_regs)
	addi x1, x1, %lo(irq_regs)
	
	/* use x2 as scratch space for saving registers */
	
	/* q0 (== x1), q2(== x2), q3 */
	picorv32_getq_insn(x2, q0)
	sw x2,   0*4(x1)
	picorv32_getq_insn(x2, q2)
	sw x2,   1*4(x1)
	picorv32_getq_insn(x2, q3)
	sw x2,   2*4(x1)
	
	/* save x3 - x31 */
	sw x3,   3*4(x1)
	sw x4,   4*4(x1)
	sw x5,   5*4(x1)
	sw x6,   6*4(x1)
	sw x7,   7*4(x1)
	sw x8,   8*4(x1)
	sw x9,   9*4(x1)
	sw x10, 10*4(x1)
	sw x11, 11*4(x1)
	sw x12, 12*4(x1)
	sw x13, 13*4(x1)
	sw x14, 14*4(x1)
	sw x15, 15*4(x1)
	sw x16, 16*4(x1)
	sw x17, 17*4(x1)
	sw x18, 18*4(x1)
	sw x19, 19*4(x1)
	sw x20, 20*4(x1)
	sw x21, 21*4(x1)
	sw x22, 22*4(x1)
	sw x23, 23*4(x1)
	sw x24, 24*4(x1)
	sw x25, 25*4(x1)
	sw x26, 26*4(x1)
	sw x27, 27*4(x1)
	sw x28, 28*4(x1)
	sw x29, 29*4(x1)
	sw x30, 30*4(x1)
	sw x31, 31*4(x1)
	
	/* prepare C handler stack */
	lui sp, %hi(_irq_stack)
	addi sp, sp, %lo(_irq_stack)

	/* set a0 to pending interrupts (q1) */
	picorv32_getq_insn(a0, q1);
	
	/* call C handler */
	jal ra, isr
	
	/* use x1 to index into irq_regs */
	lui x1, %hi(irq_regs)
	addi x1, x1, %lo(irq_regs)
	
	/* restore q0 - q2 */
	lw x2,   0*4(x1)
	picorv32_setq_insn(q0, x2)
	lw x2,   1*4(x1)
	picorv32_setq_insn(q1, x2)
	lw x2,   2*4(x1)
	picorv32_setq_insn(q2, x2)
	
	/* restore x3 - x31 */
	lw x3,   3*4(x1)
	lw x4,   4*4(x1)
	lw x5,   5*4(x1)
	lw x6,   6*4(x1)
	lw x7,   7*4(x1)
	lw x8,   8*4(x1)
	lw x9,   9*4(x1)
	lw x10, 10*4(x1)
	lw x11, 11*4(x1)
	lw x12, 12*4(x1)
	lw x13, 13*4(x1)
	lw x14, 14*4(x1)
	lw x15, 15*4(x1)
	lw x16, 16*4(x1)
	lw x17, 17*4(x1)
	lw x18, 18*4(x1)
	lw x19, 19*4(x1)
	lw x20, 20*4(x1)
	lw x21, 21*4(x1)
	lw x22, 22*4(x1)
	lw x23, 23*4(x1)
	lw x24, 24*4(x1)
	lw x25, 25*4(x1)
	lw x26, 26*4(x1)
	lw x27, 27*4(x1)
	lw x28, 28*4(x1)
	lw x29, 29*4(x1)
	lw x30, 30*4(x1)
	lw x31, 31*4(x1)
	
	/* restore x1 - x2 from q registers */
	picorv32_getq_insn(x1, q1)
	picorv32_getq_insn(x2, q2)
	
	/* return from interrupt */
	picorv32_retirq_insn()

_start:
	# zero-initialize all registers
	addi x1, zero, 0
	addi x2, zero, 0
	addi x3, zero, 0
	addi x4, zero, 0
	addi x5, zero, 0
	addi x6, zero, 0
	addi x7, zero, 0
	addi x8, zero, 0
	addi x9, zero, 0
	addi x10, zero, 0
	addi x11, zero, 0
	addi x12, zero, 0
	addi x13, zero, 0
	addi x14, zero, 0
	addi x15, zero, 0
	addi x16, zero, 0
	addi x17, zero, 0
	addi x18, zero, 0
	addi x19, zero, 0
	addi x20, zero, 0
	addi x21, zero, 0
	addi x22, zero, 0
	addi x23, zero, 0
	addi x24, zero, 0
	addi x25, zero, 0
	addi x26, zero, 0
	addi x27, zero, 0
	addi x28, zero, 0
	addi x29, zero, 0
	addi x30, zero, 0
	addi x31, zero, 0

	# load stack
	la sp, _stack_end
	# run main
	jal ra, main
	# loop
1:
	j 1b

.global _irq_maskirq
_irq_maskirq:
	picorv32_maskirq_insn(t0, a0)
	addi a0, t0, 0
	ret

.section .bss

irq_regs:
	/* saved interrupt registers, x0 - x31 */
	.fill 32,4
	/* interrupt stack */
	.fill 256,4
_irq_stack:

.global _heap_start
_heap_start:
	.fill 2048,4
.global _heap_end
_heap_end:

_stack_start:
	.fill 2048,4
_stack_end:

